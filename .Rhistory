library(datasets)
data(mtcars)
library(datasets)
data(mtcars)
pairs(mtcars, panel = panel.smooth)
summary(mtcars)
sumary<-summary(mtcars)
?matrix
t(sumary)
pairs(mtcars, panel = panel.smooth)
?pairs
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ am | as.factor(cyl), data = mtcars, panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ am | as.factor(cyl) + hp, data = mtcars, panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ am | as.factor(cyl) + hp + weight, data = mtcars, panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ am | as.factor(cyl) + hp + wt, data = mtcars, panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ am | as.factor(cyl) + hp + as.factor(wt), data = mtcars, panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ am | as.factor(cyl) + as.factor(wt), data = mtcars, panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ am | as.factor(cyl) + hp, data = mtcars, panel = panel.smooth, rows = 1)
pairs(mtcars)
pairs(mtcars, panel = panel.smooth)
cor(mtcars)
cor(mtcars use="complete.obs", method="kendall")
cor(mtcars, use="complete.obs", method="kendall")
cor(mtcars, use="complete.obs")
?mtcars
pairs(mtcars, panel = panel.smooth)
pairs(mtcars, panel = panel.smooth)
cor()mtcars
cor(mtcars)
cor(mtcars)
correlation<-cor(mtcars)
round(correlation, 2)
head(mtcars)
mtcars
?panel
?pairs
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ am | as.factor(cyl) + hp, data = mtcars, panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ as.factor(cyl) |  am, data = mtcars, panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ am | as.factor(cyl), data = mtcars, panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ as.factor(cyl) | am, data = mtcars, panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ as.factor(cyl) | hp + am, data = mtcars, panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ am | as.factor(cyl), data = mtcars, panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ am | as.factor(wt), data = mtcars, panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ am | as.factor(disp), data = mtcars, panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ am | as.factor(cyl), data = mtcars, panel = panel.smooth, rows = 1)
pairs(mtcars)
coplot(mpg ~ am | as.factor(cyl), data = mtcars, panel = panel.smooth, rows = 1)
coplot(mpg ~ am | as.factor(wt), data = mtcars, panel = panel.smooth, rows = 1)
coplot(mpg ~ am | as.factor(cyl), data = mtcars, panel = panel.smooth, rows = 1)
pairs(mtcars , panel = panel.smooth)
round(cor(mtcars), 2)
summary(lm(mpg ~ cyl, data =
mtcars))
summary(lm(mpg ~ as.factor(cyl), data =
mtcars))
pairs(mtcars_processed, panel = panel.smooth)
mtcars_processed<-mtcars
mtcars_processed$cyl = as.factor(mtcars_processed$cyl)
mtcars_processed$drat = as.factor(mtcars_processed$drat)
mtcars_processed$ws = as.factor(mtcars_processed$ws)
mtcars_processed$am = factor(mtcars$am, c(0, 1), c("manual","automatic"))
pairs(mtcars_processed, panel = panel.smooth)
head(mtcars)
head(mtcars_processed)
mtcars_processed$vs = as.factor(mtcars_processed$vs)
head(mtcars)
head(mtcars_processed)
pairs(mtcars_processed, panel = panel.smooth)
round(cor(mtcars), 2)
round(cor(mtcars_processed), 2)
mtcars_processed$am = as.factor(mtcars_processed$am)
round(cor(mtcars_processed), 2)
head(mtcars_processed)
mtcars_processed$am = as.factor(mtcars$am)
round(cor(mtcars_processed), 2)
data(mtcars)
summary(mtcars)
pairs(mtcars, panel = panel.smooth)
round(cor(mtcars), 2)
mtcars_processed<-mtcars
mtcars_processed$cyl = as.factor(mtcars_processed$cyl)
mtcars_processed$drat = as.factor(mtcars_processed$drat)
mtcars_processed$ws = as.factor(mtcars_processed$ws)
pairs(mtcars_processed, panel = panel.smooth)
mtcars_processed<-mtcars
mtcars_processed$cyl = as.factor(mtcars_processed$cyl)
mtcars_processed$drat = as.factor(mtcars_processed$drat)
mtcars_processed$vs = as.factor(mtcars_processed$vs)
mtcars_processed$am = as.factor(mtcars_processed$am)
pairs(mtcars_processed, panel = panel.smooth)
pairs(mtcars, panel = panel.smooth)
pairs(mtcars_processed, panel = panel.smooth)
round(cor(mtcars), 2)
round(cor(mtcars_processed), 2)
mtcars_processed<-mtcars
round(cor(mtcars_processed), 2)
mtcars_processed$cyl = as.factor(mtcars_processed$cyl)
round(cor(mtcars_processed), 2)
summary(lm(mpg ~ cyl, data = mtcars))
summary(lm(mpg ~ as.factor(am, c(0,1), c("manual", "automatic")), data = mtcars))
plot(mpg ~ as.factor(am), mtcars)
?as.factor
summary(lm(mpg ~ factor(am, c(0,1), c("manual", "automatic")), data = mtcars))
plot(mpg ~ as.factor(am), mtcars)
summary(lm(mpg ~ as.factor(am), data = mtcars))
plot(mpg ~ factor(am, c(0,1), c("manual", "automatic")), mtcars)
lm1<-lm(mpg ~ am, data = mtcars)
model_aux = lm(mpg ~ am + wt + cyl + disp + hp,
data = mtcars)
anova(model_aux)
model_aux = lm(mpg ~ am + wt + cyl + disp + hp + drat + vs,
data = mtcars)
anova(model_aux)
lmodel1<-lm(mpg ~ am, data = mtcars)
summary(lmodel1)
17.147+7.245
boxplot(wt*1000 ~ am, xlab="Weight (in pounds)", main = "Chart 2: MPG by Car Weight", las=1, data=mtcars)
boxplot(wt*1000 ~ factor(am, c(0,1), c("Automatic","Manual")), ylab="Weight (in pounds)", main = "Chart 2: MPG by Car Weight", las=1, data=mtcars)
boxplot(wt*1000 ~ factor(am, c(0,1), c("Automatic","Manual")), xlab="Transmission", ylab="Weight (in pounds)", main = "Chart 2: MPG by Car Weight", las=1, data=mtcars)
boxplot(wt*1000 ~ factor(am, c(0,1), c("Automatic","Manual")), xlab="Transmission", ylab="Weight (in pounds)", main = "Transmission by Car Weight", las=1, data=mtcars)
par(mfrow = c(2,2))
boxplot(wt*1000 ~ factor(am, c(0,1), c("Automatic","Manual")), xlab="Transmission", ylab="Weight (in pounds)", main = "Transmission by Car Weight", las=1, data=mtcars)
boxplot(hp ~ am, xlab="Transmission", ylab="Horsepower", main = "Transmission by Horsepower", las=1)
boxplot(disp ~ am, xlab="Transmission", ylab="Displacement", main = "Transmission by Displacement", las=1)
boxplot(cyl ~ am, xlab="Transmission", ylab="Cylinders", main = "Transmission by Cylinders", las=1)
boxplot(wt*1000 ~ factor(am, c(0,1), c("Automatic","Manual")), xlab="Transmission", ylab="Weight (in pounds)", main = "Transmission by Car Weight", las=1, data=mtcars)
boxplot(wt*1000 ~ factor(am, c(0,1), c("Automatic","Manual")), xlab="Transmission", ylab="Weight (in pounds)", main = "Transmission by Car Weight", data=mtcars)
boxplot(wt*1000 ~ factor(am, c(0,1), c("Automatic","Manual")), xlab="Transmission", ylab="Weight (in pounds)", main = "Transmission by Car Weight", data=mtcars)
boxplot(wt*1000 ~ factor(am, c(0,1), c("Automatic","Manual")), xlab="Transmission", ylab="Weight (in pounds)", main = "Transmission by Car Weight", data=mtcars)
boxplot(wt*1000 ~ factor(am, c(0,1), c("Automatic","Manual")), xlab="Transmission", ylab="Weight (in pounds)", main = "Transmission by Car Weight", data=mtcars)
boxplot(wt*1000 ~ factor(am, c(0,1), c("Automatic","Manual")), xlab="Transmission", ylab="Weight (in pounds)", main = "Transmission by Car Weight", data=mtcars)
boxplot(wt*1000 ~ factor(am, c(0,1), c("Automatic","Manual")), xlab="Transmission", ylab="Weight (in pounds)", main = "Transmission by Car Weight", data=mtcars)
par(mfrow = c(1,1))
boxplot(wt*1000 ~ factor(am, c(0,1), c("Automatic","Manual")), xlab="Transmission", ylab="Weight (in pounds)", main = "Transmission by Car Weight", las=1, data=mtcars)
boxplot(wt*1000 ~ factor(am, c(0,1), c("Automatic","Manual")), xlab="Transmission", ylab="Weight (in pounds)", main = "Transmission by Car Weight", data=mtcars)
install.package(xtable)
install.packages(xtable)
install.packages("xtable")
?highlight
library(highlight)
* In this model, he residual range is smaller. The same happens with the estimated standard deviation of the error (2.5 mpg).
plot(lmodel2)
lmodel2 <- lm(mpg ~ cyl + am + wt + hp + disp, data=mtcars)
plot(lmodel2)
par(mfrow = c(2,2))
plot(lmodel2) # Residual plots for the crude model
par(mfrow = c(2,2))
plot(lmodel2, main="Figure 5: Residual Plots") # Residual plots for the crude model
pairs(mtcars, panel = panel.smooth, main="Figure 1: Pairs Plot")
pairs(mtcars, panel = panel.smooth, main="Figure 1: Pairs Plot", border=2)
plot(mpg ~ as.factor(cyl), xlab="Cylinders", ylab="MPG", main="Figure 2: MPG by Cylinders", mtcars)
plot(mpg ~ as.factor(cyl), xlab="Cylinders", ylab="MPG", main="Figure 2: MPG by Cylinders", mtcars)
plot(mpg ~ as.factor(cyl), xlab="Cylinders", ylab="MPG", main="Figure 2: MPG by Cylinders", mtcars)
plot(mpg ~ as.factor(cyl), xlab="Cylinders", ylab="MPG", main="Figure 2: MPG by Cylinders", mtcars)
plot(mpg ~ as.factor(cyl), xlab="Cylinders", ylab="MPG", main="Figure 2: MPG by Cylinders", mtcars)
plot(mpg ~ as.factor(cyl), xlab="Cylinders", ylab="MPG", main="Figure 2: MPG by Cylinders", mtcars)
plot(mpg ~ as.factor(cyl), xlab="Cylinders", ylab="MPG", main="Figure 2: MPG by Cylinders", mtcars)
plot(mpg ~ as.factor(cyl), xlab="Cylinders", ylab="MPG", main="Figure 2: MPG by Cylinders", mtcars)
par(mfrow = c(1,1))
plot(mpg ~ as.factor(cyl), xlab="Cylinders", ylab="MPG", main="Figure 2: MPG by Cylinders", mtcars)
plot(mpg ~ as.factor(cyl), xlab="Cylinders", ylab="MPG", main="Figure 2: MPG by Cylinders", mtcars, border=1)
plot(mpg ~ as.factor(cyl), xlab="Cylinders", ylab="MPG", main="Figure 2: MPG by Cylinders", mtcars, border=10)
plot(mpg ~ as.factor(cyl), xlab="Cylinders", ylab="MPG", main="Figure 2: MPG by Cylinders", mtcars, margin.table=1)
plot(mpg ~ as.factor(cyl), xlab="Cylinders", ylab="MPG", main="Figure 2: MPG by Cylinders", mtcars, margin.table=10)
library(caret)
install.packages("caret")
library(caret)
install.packages("BradleyTerry2")
library(caret)
library(kernlab)
install.packages("kernlab")
library(kernlab)
library(caret)
library(kernlab)
data(spam)
data(mtcars)
çmtcars
mtcars
?mtcars
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
training
head(training)
dim(training)
?dim
dim(testing)
inTrain <- createDataPartition(y=spam$type,
p=0.6, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
set.seed(32343)
modelFit <- train(spam$type ~.,data=training, method="glm")
modelFit
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
install.packages('e1071', dependencies=TRUE)
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
modelFit$finalModel
predictions <- predict(modelFit,newdata=testing)
predictions
confusionMatrix(predictions,testing$type)
library(ISLR); library(ggplot2); library(caret);
data(Wage)
summary(Wage)
install.packages(ISLR)
install.packages("ISLR")
library(ISLR); library(ggplot2); library(caret);
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training); dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],
y = training$wage,
plot="pairs")
featurePlot(x=training[,c("age")],
y = training$wage,
plot="pairs")
featurePlot(x=training[,c("age","education","jobclass")],
y = training$wage,
plot="pairs")
q()
install.packages("shiny")
setwd("D:/Dropbox/cursos/Developing Data Products/Course Project/ShinyApplication")
library(shiny)
runApp()
